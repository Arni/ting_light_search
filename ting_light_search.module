<?php

function ting_light_search_init(){

}

/**
 * Implements hook_search_info().
 */
function ting_light_search_search_info() {
  return array(
    'title' => t('Ting Light'),
    'path' => 'ting',
    'conditions_callback' => 'ting_search_conditions_callback',
  );
}

/**
 * Implements hook_theme().
 */
function ting_light_search_theme($existing, $type, $theme, $path) {
  return array(
    'ting_light_search_item' => array(
      'variables' => array('result' => NULL,'item' => NULL),
      'template'  => 'ting-light-search-item',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_search_execute().
 */
function ting_light_search_search_execute($keys = NULL, $conditions = NULL) {

  // TODO: Set sort options
  $options = array();
  $results = array();
  $facetArray = array();
  $query = '(' . _ting_search_quote($keys) . ')';
  $options['numFacets'] = 25;
  module_load_include('client.inc', 'ting');
  //Extend query with selected facets
  if (isset($conditions['facets']) && $conditions['facets'] != NULL) {
    $facets = $conditions['facets'];
    foreach ($facets as $facet) {
      $facet = explode(':', $facet, 2);
      if ($facet[0]) {
        $facetArray[] = $facet[0] . '="' . rawurldecode($facet[1]) . '"';
      }
    }

    $query .= ' AND ' . implode(' AND ', $facetArray);
  }
  try {
    $page = pager_find_page();

    $resultsPerPage = variable_get('ting_search_results_per_page', 10);
    if (!empty($conditions['size'])) {
      $resultsPerPage = $conditions['size'];
    }

    if (!empty($conditions['sort'])) {
      $options['sort'] = $conditions['sort'];
    }

    //$searchResult = ting_do_search($query, $page + 1, $resultsPerPage, $options);
    $searchResult = ting_light_search_do_search($query, $page + 1, $resultsPerPage, $options);
    if (isset($searchResult->collections)) {
      $searchResult->search_key = $keys;

      // TODO: caching highes total_result know value of specific search
      //       at the moment we only know if there is one more page
      $total_results = ($page + 1) * $resultsPerPage + ($searchResult->more ? 1 : 0);

      pager_default_initialize($total_results, $resultsPerPage);

      $parsed_results = array();
      foreach ($searchResult->collections as $collection) {
        $result = ting_light_search_parse_search_results($collection);
        $image_object = ting_light_search_get_image_object($collection, $result);
        $image = theme('ting_object_cover', array('elements' => array('#object' => $image_object, '#image_style' => 'ting_new_materials_cover')));
        // $build = ting_collection_view($collection, 'teaser');
        $uri = 'http://ding2tal.dev/ting/collection/773000%3A27815952';//entity_uri('ting_collection', $collection);
        $result['image'] = $image;
        $snippet = theme('ting_light_search_item', array('result' => $result));
        //file_put_contents("/home/quickstart/work/debug/debuglightsearch6.txt", print_r($image, TRUE), FILE_APPEND);
        $results[] = array(
          'link' => 'http://ding2tal.dev/ting/collection/773000%3A27815952', // url($uri['path'], $uri['options']),
          'type' => '',
          'title' => $result['title'],
          'user' => '',
          'date' => '',
          'snippet' => $snippet,
        );
        $parsed_results[] = $result; 
      }
      $availability_object = new TingLightSearchAvailablity(); 
      $availability = $availability_object->process_availability($parsed_results);
      drupal_add_js($availability, 'setting');
      drupal_add_js(drupal_get_path('module', 'ting_covers') . '/js/ting-covers.js');
      drupal_add_js(drupal_get_path('module', 'ding_availability') . '/js/ding_availability.js');
      drupal_add_css(drupal_get_path('module', 'ding_availability') . '/css/ding_availability.css');
      //$id = drupal_html_id('availability-' . $entity->id);
    }
  } catch (TingClientException $e) {
    // TODO: Log the error.
    $results = array();
  }

  drupal_static('ting_search_results', $searchResult);

  return $results;
}

function ting_light_search_do_search($query, $page = 1, $results_per_page = 10, $options = array()) {
  $request = ting_get_request_factory()->getSearchRequest();
  $request->setQuery($query);
  if ($agency = variable_get('ting_agency', FALSE)) {
    $request->setAgency($agency);
  }

  $request->setStart($results_per_page * ($page - 1) + 1);
  $request->setNumResults($results_per_page);

//  if (!isset($options['facets']) and module_exists('ding_facetbrowser')) {
//    $options['facets'] = array();
//    // Populate facets with configured facets.
//    foreach (variable_get('ding_facetbrowser_facets', array()) as $facet) {
//      $options['facets'][] = $facet['name'];
//    }
//  }

  $request->setFacets(array('facet.subject', 'facet.creator', 'facet.type', 'facet.category', 'facet.language', 'facet.date', 'facet.acSource', 'facet.branch'));
  $request->setNumFacets( 10);
  //if (isset($options['sort']) && $options['sort']) {
   // $request->setSort($options['sort']);
  //}
  if (isset($options['collectionType'])) {
    $request->setCollectionType($options['collectionType']);
  }
  $request->setAllObjects(isset($options['allObjects']) ? $options['allObjects'] : FALSE);

  $request->setProfile("opac");


  // Apply custom ranking if enabled.
//  if (variable_get('ting_ranking_custom', FALSE)) {
//    $fields = array();
//    foreach (variable_get('ting_ranking_fields', array()) as $field) {
//      $fields[] = array(
//        'fieldName' => $field['field_name'],
//        'fieldType' => $field['field_type'],
//        'weight' => $field['weight'],
//      );
//    }

//    if (!empty($fields)) {
//      // Add the default anyIndex boosts.
//      $fields[] = array(
//        'fieldName' => 'cql.anyIndexes',
//        'fieldType' => 'phrase',
//        'weight' => 1,
//      );
//
//      $fields[] = array(
//        'fieldName' => 'cql.anyIndexes',
//        'fieldType' => 'word',
//        'weight' => 1,
//      );
//
//      $request->userDefinedRanking = array('tieValue' => 0.1, 'rankField' => $fields);
//    }
 // }
  // Otherwise, use the ranking setting.
//  else {
//    $request->setRank((isset($options['rank']) && $options['rank']) ? $options['rank'] : 'rank_general');
//  }

  // Apply custom boosts if any.
//  $boosts = variable_get('ting_boost_fields', array());
//
//  if ($boosts) {
//    $uboosts = array();
//    foreach ($boosts as $boost_field) {
//      $uboosts[] = array(
//        'fieldName' => $boost_field['field_name'],
//        'fieldValue' => $boost_field['field_value'],
//        'weight' => $boost_field['weight'],
//      );
//    }
//    $request->userDefinedBoost = array('boostField' => $uboosts);
//  }

  $search_result = ting_execute_cache($request);
  // Replace collections with proper TingCollection objects.
//  if ($search_result && is_array($search_result->collections)) {
//    $ids = array();
//    foreach ($search_result->collections as &$collection) {
//      if (isset($collection->objects[0])) {
//        $ids[] = $collection->objects[0]->id;
//      }
//    }
//    if (!isset($options['reply_only']) || !$options['reply_only']) {
//      $search_result->collections = entity_load('ting_collection', array(), array('ding_entity_id' => $ids));
//    }
//  }

  return $search_result;
}

function ting_light_search_get_image_object($collection, $result) {
  $object = $collection->objects[0];
  if (!isset($object->creators)) {
    $object->creators = $result['creators'];
  }
  if (!isset($object->title)) {
    $object->title = $result['title'];
  }
  return $object;
}





function ting_light_search_parse_search_results($collection) {
   
  if (isset($collection->objects[0])) {
    $object = $collection->objects[0];
    $lightSearchObject = new TingLightSearchObject(); 
     
    $output = array(
      'title' => $lightSearchObject->getTitle($object),
      'creators' => $lightSearchObject->getCreators($object),
      'subjects' => $lightSearchObject->getSubjects($object),
      'abstract' => $lightSearchObject->getAbstract($object),
      'local_id' => $lightSearchObject->getLocalId($object),
      'owner_id' => $lightSearchObject->getOwnerId($object),
      'date' => $lightSearchObject->getObjectDate($object),
      'serie_title' => $lightSearchObject->getSerieTitle($object),
      'serie_description' => $lightSearchObject->getSerieDescription($object),
      'types' => ting_light_search_process_types($collection, $lightSearchObject),
    );
  }
  return $output;
}

function ting_light_search_process_types($collection, $lightSearchObject) {
  $types = array();
  $availability = new TingLightSearchAvailablity(); 
  foreach ($collection->objects as $object) {
    $type_value = $lightSearchObject->getObjectType($object);
    $type_exists_allready = false;
    foreach ($types as &$type) {
      if ($availability->is_same_type ($type['type'], $type_value, $lightSearchObject->getLocalId($object))) {
        $type_exists_allready = true;
        $type['count'] = $type['count'] + 1;
        if ($availability->is_check_availability_type($lightSearchObject->getAc_source($object), $type_value)) {
          $type['object_ids'][] = $lightSearchObject->getLocalId($object);
        }
        break;
      }
    }
    if (!$type_exists_allready) {
      $new_type = array(
        'type' => $type_value,
        'local_id' => $lightSearchObject->getLocalId($object),
        'owner_id' => $lightSearchObject->getOwnerId($object),
        'count' => 1,
        'object_ids' => array(),
      );
       $new_type['id'] = $availability->availability_id($new_type);
       $new_type['class'] = $availability->availability_class ($type_value);
       $new_type['availability_text'] = $availability->availability_text($type_value);

      if ($availability->is_check_availability_type($lightSearchObject->getAc_source($object), $type_value)) {
        $new_type['object_ids'][] = $lightSearchObject->getLocalId($object);
      }
      //file_put_contents("/home/quickstart/work/debug/debuglightsearch7.txt", print_r($new_type  , TRUE), FILE_APPEND);
      $types[] = $new_type;
    }
  }
  foreach ($types as &$type) {
    if ($type['count'] == 1) {
      $type['path'] = '/ting/object/' . $type['owner_id'] . ':' . $type['local_id'];
    } else {
      $type['path']= '/ting/collection/' . $type['owner_id'] . ':' . $type['local_id'];
    }
  }
  return $types;
}

function template_preprocess_ting_light_search_item(&$variables) {
  $item = array();
  $result = $variables['result'];
    $collection_link = 'ting/collection/' . $result['owner_id'] . ':' . $result['local_id'];
    if (isset($result['title'])) {
      $item['title_link'] = l($result['title'], $collection_link);
    }
    $image = $result['image'];
    $item['image'] = l($image, $collection_link, array('html' => 'true'));

    if (isset($result['creators']) && !empty($result['creators'])) {
      $creators = 'Af ';
      foreach ($result['creators'] as $creator) {
        $creators .= l($creator, 'search/ting/dc.creator=' . $creator, array('class' => 'author')); //'<a class="author" href="/search/ting/dc.creator=' . $creator . '"> ' . $creator . '</a> ';
      }
      $item['creators'] = $creators;
    }

    $item['abstract'] = $result['abstract'];
    $item['date'] = ' ( ' . $result['date'] . ')';

    if ($result['serie_title']) {
      $serie_search = check_plain(str_replace('@serietitle', $result['serie_title'], 'bib.titleSeries="@serietitle" OR dc.description="@serietitle"'));
      $item['serie'] = l($result['serie_title'], 'search/ting/' . $serie_search, array('class' => 'series'));
    } else if ($result['serie_description']) {
      $item['serie'] = $result['serie_description'];
    }

    if ($result['subjects']) {
      $subjects = array();
      foreach ($result['subjects'] as $subject) {
        $subjects[] = l($subject, 'search/ting/dc.subject=' . $subject, array('attributes' => array('class' => 'subject')));
      }
      $item['subjects'] = $subjects;
    }
    //<li id="availability-77300027963390-dvd" class="availability dvd  pending first last"><a href="/ting/object/773000%3A27963390">Dvd</a></li>
    if ($result['types']) {
      $types = array();
      foreach ($result['types'] as $type) {
        $types[] = '<li id="' . $type['id'] . '" class="' . $type['class'] . '">' . l($type['availability_text'], $type['path'], array('html' => 'true')) . '</li>';
      }
      $item['types'] = $types;
    }
    $variables['item'] = $item;
 }
